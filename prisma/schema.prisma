// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole   @default(PATIENT)
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  admin   Admin?
  doctor  Doctor?
  patient Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                 String   @id @default(uuid())
  name               String
  email              String   @unique
  profilePhoto       String?
  contactNumber      String
  address            String?
  registrationNumber String
  experience         Int      @default(0)
  gender             Gender
  appointmentFee     Int
  qualification      String
  currentWorkplace   String
  designation        String
  averageRating      Float    @default(0)
  isDeleted          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User                 @relation(fields: [email], references: [email])
  doctorSpecialities DoctorSpecialities[]
  doctorSchedules    DoctorSchedules[]
  appointments       Appointment[]
  prescriptions      Prescription[]
  reviews            Review[]

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user              User               @relation(fields: [email], references: [email])
  patientHealthData PatientHealthData?
  medicalReports    MedicalReport[]
  appointments      Appointment[]
  prescriptions     Prescription[]
  reviews           Review[]

  @@map("patients")
}

model Specialities {
  id    String  @id @default(uuid())
  title String  @unique
  icon  String?

  doctors DoctorSpecialities[]

  @@map("specialities")
}

model DoctorSpecialities {
  specialityId String
  doctorId     String

  specialities Specialities @relation(fields: [specialityId], references: [id])
  doctor       Doctor       @relation(fields: [doctorId], references: [id])

  @@id([specialityId, doctorId])
  @@map("doctor_specialities")
}

model PatientHealthData {
  id                  String         @id @default(uuid())
  patientId           String         @unique
  dateOfBirth         String
  gender              Gender
  bloodGroup          BloodGroup
  hasAllergies        Boolean?       @default(false)
  hasDisease          Boolean?       @default(false)
  height              Float
  weight              Float
  smokingStatus       Boolean?       @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?       @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?       @default(false)
  recentAnxiety       Boolean?       @default(false)
  recentDepression    Boolean?       @default(false)
  maritalStatus       MartialStatus? @default(UNMARRIED)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("patient_health_data")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id])

  @@map("medical_reports")
}

model Schedule {
  id            String   @id @default(uuid())
  startDateTime DateTime
  endDateTime   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctorSchedules DoctorSchedules[]
  appointments    Appointment[]

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  scheduleId    String
  isBooked      Boolean @default(false)
  appointmentId String? @unique

  schedule    Schedule     @relation(fields: [scheduleId], references: [id])
  doctor      Doctor       @relation(fields: [doctorId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String            @unique
  videoCallingId String?
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  patient         Patient          @relation(fields: [patientId], references: [id])
  doctor          Doctor           @relation(fields: [doctorId], references: [id])
  schedule        Schedule         @relation(fields: [scheduleId], references: [id])
  doctorSchedules DoctorSchedules?
  payments        payment?
  prescription    Prescription?
  review          Review?

  @@map("appointments")
}

model payment {
  id                 String        @id @default(uuid())
  appointmentId      String        @unique
  amount             Float
  transactionId      String        @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("payments")
}

model Prescription {
  id            String    @id @default(uuid())
  appointmentId String    @unique
  doctorId      String
  patientId     String
  instructions  String
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])

  @@map("prescriptions")
}

model Review {
  id            String   @id @default(uuid())
  patientId     String
  doctorId      String
  appointmentId String   @unique
  rating        Float
  comment       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patient     Patient     @relation(fields: [patientId], references: [id])
  doctor      Doctor      @relation(fields: [doctorId], references: [id])
  appointment Appointment @relation(fields: [appointmentId], references: [id])

  @@map("reviews")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum MartialStatus {
  MARRIED
  UNMARRIED
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PAID
  UNPAID
}
